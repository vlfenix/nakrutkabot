import logging
import json
import os
import requests
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

API_TOKEN = '7899636365:AAGrwUJLOPB0xPEjObDazOV8AAOisiwxFuM'
NAKRUTKA_API_KEY = '524cd5b9317cc5ec4843456de288beba'
NAKRUTKA_API_URL = 'https://nakrutka.cc/api/'
USERS_FILE = 'users.json'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

def load_users():
    if not os.path.exists(USERS_FILE):
        return {}
    with open(USERS_FILE, 'r') as f:
        return json.load(f)

def save_users(users):
    with open(USERS_FILE, 'w') as f:
        json.dump(users, f)

def get_user_balance(user_id):
    users = load_users()
    return users.get(str(user_id), {}).get('balance', 0)

def update_user_balance(user_id, amount):
    users = load_users()
    user_id = str(user_id)
    if user_id not in users:
        users[user_id] = {'balance': 0}
    users[user_id]['balance'] += amount
    save_users(users)

def deduct_user_balance(user_id, amount):
    users = load_users()
    user_id = str(user_id)
    if user_id in users and users[user_id]['balance'] >= amount:
        users[user_id]['balance'] -= amount
        save_users(users)
        return True
    return False

# /start
@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('/balance'), KeyboardButton('/nakrutka'), KeyboardButton('/popovnyty'))
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç –¥–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏. –û–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É:", reply_markup=kb)

# /balance
@dp.message_handler(commands=['balance'])
async def balance_cmd(message: types.Message):
    user_balance = get_user_balance(message.from_user.id)
    await message.answer(f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} –≥—Ä–Ω")

# /popovnyty
@dp.message_handler(commands=['popovnyty'])
async def popovnyty_cmd(message: types.Message):
    await message.answer("üí∏ –í–≤–µ–¥–∏ —Å—É–º—É –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 100):")
    dp.register_message_handler(handle_topup, state=None)

def handle_topup(message: types.Message):
    try:
        amount = float(message.text)
        update_user_balance(message.from_user.id, amount)
        return executor._get_current_task().get_loop().create_task(
            message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–≤–Ω–µ–Ω–æ –Ω–∞ {amount} –≥—Ä–Ω.")
        )
    except ValueError:
        return executor._get_current_task().get_loop().create_task(
            message.answer("‚ùå –í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É.")
        )

# /nakrutka
@dp.message_handler(commands=['nakrutka'])
async def nakrutka_cmd(message: types.Message):
    await message.answer("üîó –í–≤–µ–¥–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∞–±–æ —é–∑–µ—Ä–Ω–µ–π–º –¥–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏:")
    dp.register_message_handler(get_link, state=None)

def get_link(message: types.Message):
    link = message.text
    service_id = 1  # –ó–∞–º—ñ–Ω–∏ –Ω–∞ ID —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É –∑ –Ω–∞–∫—Ä—É—Ç–∫–∏
    quantity = 100
    price_per_100 = 10  # –í–∞—Ä—Ç—ñ—Å—Ç—å —É –≥—Ä–Ω
    user_id = message.from_user.id
    if not deduct_user_balance(user_id, price_per_100):
        return executor._get_current_task().get_loop().create_task(
            message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ.")
        )

    response = requests.get(NAKRUTKA_API_URL, params={
        'key': NAKRUTKA_API_KEY,
        'action': 'add',
        'service': service_id,
        'link': link,
        'quantity': quantity
    })
    data = response.json()
    order_id = data.get('order')
    if order_id:
        msg = f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ. ID: {order_id}"
    else:
        msg = f"‚ùå –ü–æ–º–∏–ª–∫–∞: {data}"
    return executor._get_current_task().get_loop().create_task(message.answer(msg))

# /status
@dp.message_handler(commands=['status'])
async def status_cmd(message: types.Message):
    await message.answer("üîé –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:")
    dp.register_message_handler(check_order_status, state=None)

def check_order_status(message: types.Message):
    order_id = message.text
    response = requests.get(NAKRUTKA_API_URL, params={
        'key': NAKRUTKA_API_KEY,
        'action': 'status',
        'order': order_id
    })
    data = response.json()
    status = data.get('status', '–Ω–µ–≤—ñ–¥–æ–º–æ')
    start_count = data.get('start_count', '-')
    remains = data.get('remains', '-')
    return executor._get_current_task().get_loop().create_task(
        message.answer(f"üì¶ –°—Ç–∞—Ç—É—Å: {status}\n–°—Ç–∞—Ä—Ç: {start_count}\n–ó–∞–ª–∏—à–∏–ª–æ—Å—å: {remains}")
    )

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
